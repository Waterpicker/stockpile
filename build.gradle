buildscript {
    repositories {
        jcenter()
        maven { url 'https://www.dimdev.org/maven/' }
        maven { url 'http://repo.spongepowered.org/maven' }
    }

    dependencies {
        classpath 'org.dimdev:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
    }
}

plugins {
    id 'org.ajoberstar.reckon' version '0.8.0'
    id 'org.jetbrains.kotlin.jvm' version '1.2.61'
}

apply plugin: 'net.minecraftforge.gradle.tweaker-client'
apply plugin: 'org.spongepowered.mixin'

archivesBaseName = 'stockpile'
group 'notjoe.stockpile'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url 'https://www.dimdev.org/maven/' }
}

configurations {
    shade
    compile.extendsFrom shade
}

dependencies {
    compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    // compile 'org.jetbrains:annotations:13.0'

    implementation 'org.dimdev:rift:1.0.4-51:dev'
    implementation 'com.github.InsomniaKitten:Riftlin:0.2.0'

    // We'll need to run our tests on JUnit 4 in order to use PowerMock.
    testCompile 'io.kotlintest:kotlintest-runner-junit4:3.1.7'
    testCompile 'org.powermock:powermock-module-junit4:1.7.1'
    testCompile 'org.powermock:powermock-api-mockito2:1.7.1'

}

mixin {
    defaultObfuscationEnv notch
    add sourceSets.main, 'mixins.stockpile.refmap.json'
}

minecraft {
    version = '1.13'
    mappings = 'snapshot_20180817'
    runDir = 'run'
    tweakClass = 'org.dimdev.riftloader.launch.RiftLoaderClientTweaker'
}

reckon {
    scopeFromProp()
    stageFromProp('beta', 'rc', 'final')
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

jar {
    configurations.shade.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**'
        }
    }

    finalizedBy reobfJar
}

task devJar(type: Jar, dependsOn: classes) {
    classifier 'dev'
    from sourceSets.main.output
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives devJar
    archives sourcesJar
}

processResources {
    filesMatching('riftmod.json') {
        expand 'version': project.version
    }
}